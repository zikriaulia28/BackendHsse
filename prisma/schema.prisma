datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PermitDriving {
  id                Int      @id @default(autoincrement())
  date              DateTime
  namaPengemudi     String
  car               Car      @relation(fields: [carId], references: [id])
  carId             Int
  tujuan            String
  barangBawaan      String
  pemohon           String
  pemberiIzin       String
  petugasSecurity   String
  kmAwal            String
  kmAkhir           String?
  jamKeluar         DateTime 
  jamMasuk          DateTime?
  status            String
  fuelLevel         String
  user              User?     @relation("PermitCreator", fields: [userId], references: [id])
  userId            Int?

  @@index([carId])
  @@index([userId])
}

model Car {
  id        Int        @id @default(autoincrement())
  nopol     String     @unique
  model     String
  usageLogs UsageLog[]
  permits   PermitDriving[]
}

model UsageLog {
  id        Int      @id @default(autoincrement())
  date      DateTime
  kmUsed    Float
  car       Car      @relation(fields: [carId], references: [id])
  carId     Int

  @@index([carId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name  String
  role      Role     @default(user)
  position  Position?
  permits   PermitDriving[] @relation("PermitCreator")
}

enum Role {
  user
  admin
}

enum Position {
  Supervisor
  FacilityTechnician
  FacilitySupport
  Security
}

model SafetyRecord {
  id                          Int       @id @default(autoincrement())
  date                        DateTime  // Corresponds to the "Date" field
  monthlySafeManhours         Int       // Monthly Safe Manhours
  ytdSafeManhours             Int       // Year-to-Date Safe Manhours
  cumulativeSafeManhours      Int       // Cumulative Safe Manhours
  monthlySafeDriving          Int       // Monthly Safe Driving
  ytdSafeDriving              Int       // Year-to-Date Safe Driving
  cumulativeSafeDriving       Int       // Cumulative Safe Driving
  fatality                   Int       // Fatality count
  lostTimeInjury             Int       // Lost Time Injury count
  incidentAccident           Int       // Incident/Accident count
  totalSicknessAbsence       Float     // Total Sickness Absence percentage
  sicknessAbsenceFrequency    Float     // Sickness Absence Frequency
  environmentPollution       Int       // Environment Pollution incidents
  securityIncident            Int       // Security Incidents
}

model USATemuan {
  id                     Int      @id @default(autoincrement())
  nama                   String
  status                 String
  judul                  String
  lokasiTemuan           String
  areaSpesifik           String
  jenisTemuan            JenisTemuan
  uscConditionTerkait     String?
  usaPracticeTerkait      String?
  penyebabKetidaksesuaian String?
  tindakanPerbaikan       String?
  tindakanPencegahan      String?
  fotoSebelum            String?
  fotoClosing            String?
  waktu                  DateTime
  statusAkhir            String?
}

enum JenisTemuan {
  USA
  USC
}

model PTWLog {
  id                 Int      @id @default(autoincrement())
  date               DateTime // The date of the PTW log
  noPTW              String   // The PTW number (e.g., 00552/PTW-RO1/2024)
  workDescription    String   // A description of the work (e.g., "Perbaikan Mess dan Renovasi Pos Security")
  section            String   // The section/department involved (e.g., Jabung Compressor Station)
  typeOfWork         String   // The type of work (e.g., "Cold Work Permit")
  receivingAuthority String   // The name of the receiving authority (e.g., "Asdian Rustadianto")
  status             String   // The status (e.g., Open, Closed)
  hsseRemark         String?  // HSSE Remark (can be nullable)
  scan               String?  // Optional field for scanned documents (can be nullable)
  createdAt          DateTime @default(now()) // When the entry was created
  updatedAt          DateTime @updatedAt      // Automatically updated on change
}

